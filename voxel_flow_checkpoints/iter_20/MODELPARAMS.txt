batch_size=8
learning_rate=0.0001
epsilon=0.001
lambda_mask=0.01
lambda_motion=0.005

1 video per category
Charbonnier loss 
Charbonnier regularization 
Multi-scale
ELU units

# scale 64 x 64
input_images_64 = tf.image.resize_bilinear(input_images, [64, 64])
conv_1c = slim.conv2d(input_images_64, 64, [5, 5], stride=1, scope='conv1c')
pool_1c = slim.max_pool2d(conv_1c, [2, 2], scope='pool1c')
conv_2c = slim.conv2d(pool_1c, 128, [5, 5], stride=1, scope='conv2c')
pool_2c = slim.max_pool2d(conv_2c, [2, 2], scope='pool2c')
conv_3c = slim.conv2d(pool_2c, 256, [3, 3], stride=1, scope='conv3c')
pool_3c = slim.max_pool2d(conv_3c, [2, 2], scope='pool3c')
bottleneck_c = slim.conv2d(pool_3c, 256, [3, 3], stride=1, scope='bottleneck_c')
# decoders
upsamp_1c = tf.image.resize_bilinear(bottleneck_c, [16, 16])
deconv_1c = slim.conv2d(tf.concat([upsamp_1c, conv_3c], axis=3), 
            256, [3, 3], stride=1, scope='deconv1c')
upsamp_2c = tf.image.resize_bilinear(deconv_1c, [32, 32])
deconv_2c = slim.conv2d(tf.concat([upsamp_2c, conv_2c], axis=3), 
            128, [5, 5], stride=1, scope='deconv2c')
# upsample to input dimensions
upsamp_3c = tf.image.resize_bilinear(deconv_2c, [64, 64])
deconv_3c = slim.conv2d(deconv_2c, 64, [5, 5], strid=1, scope='deconv_3c')
flow_64 = slim.conv2d(tf.concat([deconv_3c, conv_1c], axis=3), 
            3, [5, 5], stride=1, scope='flow_64')


# scale 128 x 128
input_images_128 = tf.image.resize_bilinear(input_images, [128, 128])
conv_1b = slim.conv2d(input_images_128, 64, [5, 5], stride=1, scope='conv1b')
pool_1b = slim.max_pool2d(conv_1b, [2, 2], scope='pool1b')
conv_2b = slim.conv2d(pool_1b, 128, [5, 5], stride=1, scope='conv2b')
pool_2b = slim.max_pool2d(conv_2b, [2, 2], scope='pool2b')
conv_3b = slim.conv2d(pool_2b, 256, [3, 3], stride=1, scope='conv3b')
pool_3b = slim.max_pool2d(conv_3b, [2, 2], scope='pool3b')
bottleneck_b = slim.conv2d(pool_3b, 256, [3, 3], stride=1, scope='bottleneck_b')
# decoders
upsamp_1b = tf.image.resize_bilinear(bottleneck_b, [32, 32])
deconv_1b = slim.conv2d(tf.concat([upsamp_1b, conv_3b], axis=3), 
            256, [3, 3], stride=1, scope='deconv1b')
upsamp_2b = tf.image.resize_bilinear(deconv_1b, [64, 64])
deconv_2b = slim.conv2d(tf.concat([upsamp_2b, conv_2b], axis=3), 
            128, [5, 5], stride=1, scope='deconv2b')
# upsample to input dimensions
upsamp_3b = tf.image.resize_bilinear(deconv_2b, [128, 128])
deconv_3b = slim.conv2d(tf.concat([upsamp_3b, conv_1b], axis=3), 
            64, [5, 5], stride=1, scope='deconv3b')
# concatenate w/ coarser scale
deconv_64b = tf.image.resize_bilinear(flow_64[:, :, :, :2], [128, 128])
deconv_64b = slim.conv2d(deconv_64b, 32, [128, 128], stride=1, scope='deconv_64b')
flow_128 = slim.conv2d(tf.concat([deconv_64b, deconv_3b], axis=3), 3,
                     [5, 5], stride=1, scope='flow_128')


# scale 256 x 256
# encoders
conv_1a = slim.conv2d(input_images, 64, [5, 5], stride=1, scope='conv1a')
pool_1a = slim.max_pool2d(conv_1a, [2, 2], scope='pool1a')
conv_2a = slim.conv2d(pool_1a, 128, [5, 5], stride=1, scope='conv2a')
pool_2a = slim.max_pool2d(conv_2a, [2, 2], scope='pool2a')
conv_3a = slim.conv2d(pool_2a, 256, [3, 3], stride=1, scope='conv3a')
pool_3a = slim.max_pool2d(conv_3a, [2, 2], scope='pool3a')
bottleneck_a = slim.conv2d(pool_3a, 256, [3, 3], stride=1, scope='bottleneck_a')
# decoders
upsamp_1a = tf.image.resize_bilinear(bottleneck_a, [64, 64])
deconv_1a = slim.conv2d(tf.concat([upsamp_1a, conv_3a], axis=3), 
            256, [3, 3], stride=1, scope='deconv4a')
upsamp_2a = tf.image.resize_bilinear(deconv_1a, [128, 128])
deconv_2a = slim.conv2d(tf.concat([upsamp_2a, conv_2a], axis=3), 
            128, [5, 5], stride=1, scope='deconv5a')
# upsample to input dimensions
upsamp_3a = tf.image.resize_bilinear(deconv_2a, [256, 256])

deconv_3a = slim.conv2d(tf.concat([upsamp_3a, conv_1a], axis=3), 
            32, [5, 5], stride=1, scope='deconv6a')
# concatenate w/ coarser scale
deconv_64a = tf.image.resize_bilinear(flow_64[:, :, :, :2], [256, 256])
deconv_64a = slim.conv2d(deconv_64a, 32, [256, 256], stride=1, scope='deconv_64a')
deconv_128 = tf.image.resize_bilinear(flow_128[:, :, :, :2], [256, 256])
deconv_128 = slim.conv2d(deconv_128, 32, [5, 5], stride=1, scope='deconv_128')
conv_concat1 = slim.conv2d(tf.concat([deconv_64a, deconv_128, deconv_256], axis=3),
                    96, [5, 5], stride=1, scope='conv_concat1')
conv_concat2 = slim.conv2d(conv_concat1, 64, [5, 5], stride=1, scope='conv_concat2')